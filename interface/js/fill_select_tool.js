// Generated by CoffeeScript 1.7.1
(function() {
  var curr_zoom, endVector, handle, hitOptions, movePath, oldcenter, path, project, segment, startVector, tool, vector;

  window.fill_select_tool = new paper.Tool();

  tool = fill_select_tool;

  tool.minDistance = 1;

  tool.activate();

  movePath = false;

  project = paper.project;

  segment = path = oldcenter = handle = null;

  hitOptions = {
    fill: true,
    segments: true,
    tolerance: 10,
    stroke: true
  };

  startVector = endVector = vector = null;

  $(document).ready(function() {
    $('#spiral_fill').click(function() {
      var p;
      console.log('click spirals');
      if (segment) {
        p = new paper.Point(0, 1);
        return api.changeFill(segment, p, 2);
      }
    });
  });

  tool.onMouseDown = function(event) {
    var hitResult, location, prev_selected, seg, _i, _len;
    if (event.event.button !== 0) {
      return;
    }
    prev_selected = paper.project.selectedItems;
    paper.project.deselectAll();
    if (movePath) {
      startVector = event.point;
    }
    for (_i = 0, _len = filled_segments.length; _i < _len; _i++) {
      seg = filled_segments[_i];
      hitResult = seg.hitTest(event.point, hitOptions);
      if (hitResult) {
        break;
      }
    }
    if (!hitResult) {
      startVector = event.point;
      return;
    }
    hitResult.item.selected = true;
    if (hitResult.item.is_segment) {
      console.log("selected a segment!");
      $("#select_fill").show();
    }
    if (hitResult) {
      segment = path = hitResult.item;
    } else if (hitResult.type === 'stroke') {
      console.log(hitResult);
      location = hitResult.location;
      segment = hitResult.item;
    }
    return movePath = hitResult.type === 'fill';
  };

  tool.onMouseDrag = function(event) {
    if (event.event.button !== 0) {
      return;
    }
    if (startVector) {
      endVector = event.point;
      if (vector) {
        vector.remove();
      }
      vector = new paper.Path(startVector, endVector);
      vector.strokeColor = 'red';
      vector.strokeWidth = 4;
      return;
    }
    if (segment) {
      console.log(segment.point);
      segment.point = segment.point.add(event.delta);
      return console.log(segment.point);
    } else if (path) {
      return path.position = path.position.add(event.delta);
    } else if (handle) {
      return handle.position = handle.position.add(event.delta);
    }
  };

  curr_zoom = 1;

  tool.onMouseUp = function(event) {
    var p;
    if (event.event.button !== 0) {
      return;
    }
    if (segment && vector) {
      p = (startVector.subtract(endVector)).divide((startVector.subtract(endVector)).length);
      console.log(p);
      return api.changeFill(segment, p);
    }
  };

}).call(this);
