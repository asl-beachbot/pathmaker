% bezier_calculator.m

% this script calculates 5 control points
% for given input of 2 points and 2 tangents and 
% a maximum curvature

% (1-t)^4*p0+4*(1-t)^3*t*p1+6(1-t)^2*t^2*p2+4(1-t)*t^3*p3+t^4*p4
% d/dt =  4 (p0 (t-1)^3-p1 (4 t-1) (t-1)^2+t (p2 (6 t^2-9 t+3)+t (-4 p3 t+3 p3+p4 t)))
% d^2/dt^2 = 12*(p0*(t-1)^2+p1*(-4*t^2+6*t-2)+6*p2*t^2-6*p2*t+p2-4*p3*t^2+2*p3*t+p4*t^2)
% d^3/dt^3 = 24 (-3 p2 + p3 + p1 (3 - 4 t) + p0 (-1 + t) + 6 p2 t - 4 p3 t + p4 t)
% start point / end point
c1 = [0, 0];
c2 = [5, 5];
% tangents
v1 = [0, 1];
v2 = [1, 0];

p0 = c1;
p4 = c2;

p1 = v1/4 + p0;
p3 = - (v2/4 - p4);

% t0 = ((p0-3*p1+3*p2-p3)/(p0-4*p1+6*p2-4*p3+p4))

% 12*(p0*(((p0-3*p1+3*p2-p3)/(p0-4*p1+6*p2-4*p3+p4))-1)^2+p1*(-4*((p0-3*p1+3*p2-p3)/(p0-4*p1+6*p2-4*p3+p4))^2+6*((p0-3*p1+3*p2-p3)/(p0-4*p1+6*p2-4*p3+p4))-2)+6*p2*((p0-3*p1+3*p2-p3)/(p0-4*p1+6*p2-4*p3+p4))^2-6*p2*((p0-3*p1+3*p2-p3)/(p0-4*p1+6*p2-4*p3+p4))+p2-4*p3*((p0-3*p1+3*p2-p3)/(p0-4*p1+6*p2-4*p3+p4))^2+2*p3*((p0-3*p1+3*p2-p3)/(p0-4*p1+6*p2-4*p3+p4))+p4*((p0-3*p1+3*p2-p3)/(p0-4*p1+6*p2-4*p3+p4))^2)
% 12*(p0*(((p0 - 3 * p1 + 3 * p2 - p3) / (p0 - 4*p1+ 6*p2 - 4*p3 + p4))-1)^2+p1 (-4 ((p0 - 3 * p1 + 3 * p2 - p3) / (p0 - 4*p1+ 6*p2 - 4*p3 + p4))^2+6 ((p0 - 3 * p1 + 3 * p2 - p3) / (p0 - 4*p1+ 6*p2 - 4*p3 + p4))-2)+6 p2 ((p0 - 3 * p1 + 3 * p2 - p3) / (p0 - 4*p1+ 6*p2 - 4*p3 + p4))^2-6 p2 ((p0 - 3 * p1 + 3 * p2 - p3) / (p0 - 4*p1+ 6*p2 - 4*p3 + p4))+p2-4 p3 ((p0 - 3 * p1 + 3 * p2 - p3) / (p0 - 4*p1+ 6*p2 - 4*p3 + p4))^2+2 p3 ((p0 - 3 * p1 + 3 * p2 - p3) / (p0 - 4*p1+ 6*p2 - 4*p3 + p4))+p4 ((p0 - 3 * p1 + 3 * p2 - p3) / (p0 - 4*p1+ 6*p2 - 4*p3 + p4))^2)

% p2 = ?
k = 10000;
axis equal
p2 = (sqrt(4.*p4.^2+(16.*p3-80.*p1+56.*p0-8.*k).*p4-32.*p3.^2+(128.*p1-80.*p0+8.*k).*p3-32.*p1.^2+(16.*p0+8.*k).*p1+4.*p0.^2-8.*k.*p0+k^2)+2.*p4+4.*p3+4.*p1+2.*p0-k)/12
pc = [p0; p1; p2; p3; p4]
bezier_curve(pc)